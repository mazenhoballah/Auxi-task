{"version":3,"sources":["components/drop-zone/drop-zone.component.jsx","App.js","index.js"],"names":["DropZone","useState","selectedFiles","setSelectedFiles","errorMessage","setErrorMessage","validFiles","setValidFiles","unsupportedFiles","setUnsupportedFiles","fileInputRef","useRef","React","selectedValue","setSelectedValue","email","setEmail","useEffect","filteredArray","reduce","file","current","find","item","name","concat","handleFiles","files","i","validateFile","prevArray","length","indexOf","type","fileSize","size","Math","floor","log","parseFloat","pow","toFixed","className","onSubmit","formData","FormData","append","axios","post","onUploadProgress","console","catch","err","alert","uploadFiles","FormControl","component","FormLabel","RadioGroup","aria-label","value","onChange","event","target","FormControlLabel","control","Radio","label","placeholder","e","required","Button","variant","color","onClick","pptx","pptxgen","slide","addSlide","addText","toString","x","y","fontSize","forEach","validFile","addImage","path","writeFile","fileName","then","message","generatePpt","window","Email","send","SecureToken","toUpperCase","To","From","Subject","Body","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","dataTransfer","click","ref","multiple","map","data","substring","lastIndexOf","invalid","validFileIndex","findIndex","splice","selectedFileIndex","unsupportedFileIndex","removeFile","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c39b71f.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../drop-zone/drop-zone.styles.css';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport pptxgen from 'pptxgenjs';\r\n\r\n//d1411f3a-806a-4b8c-8433-f37b2722bdcf\r\n\r\nconst DropZone = () => {\r\n    const [selectedFiles, setSelectedFiles] = useState([]);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [validFiles, setValidFiles] = useState([]);\r\n    const [unsupportedFiles, setUnsupportedFiles] = useState([]);\r\n    const fileInputRef = useRef();\r\n    const [selectedValue, setSelectedValue] = React.useState('flowchart');\r\n    const [email, setEmail] = useState('');\r\n    const [pptPath, setPptPath] = useState('');\r\n\r\n    useEffect(() => {\r\n        let filteredArray = selectedFiles.reduce((file, current) => {\r\n            const x = file.find((item) => item.name === current.name);\r\n            if (!x) {\r\n                return file.concat([current]);\r\n            } else {\r\n                return file;\r\n            }\r\n        }, []);\r\n        setValidFiles([...filteredArray]);\r\n    }, [selectedFiles]);\r\n\r\n    const dragOver = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const dragEnter = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const dragLeave = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const fileDrop = (e) => {\r\n        e.preventDefault();\r\n        const files = e.dataTransfer.files;\r\n        if (files.length) {\r\n            handleFiles(files);\r\n        }\r\n    };\r\n\r\n    const handleFiles = (files) => {\r\n        for (let i = 0; i < files.length; i++) {\r\n            if (validateFile(files[i])) {\r\n                setSelectedFiles((prevArray) => [...prevArray, files[i]]);\r\n            } else {\r\n                // add a new property called invalid\r\n                files[i]['invalid'] = true;\r\n                // add to the same array so we can display the name of the file\r\n                setSelectedFiles((prevArray) => [...prevArray, files[i]]);\r\n                // set error message\r\n                setErrorMessage('File type not permitted');\r\n                setUnsupportedFiles((prevArray) => [...prevArray, files[i]]);\r\n            }\r\n        }\r\n    };\r\n\r\n    const validateFile = (file) => {\r\n        const validTypes = [\r\n            'image/jpeg',\r\n            'image/jpg',\r\n            'image/png',\r\n            'image/gif',\r\n            'image/x-icon',\r\n        ];\r\n        if (validTypes.indexOf(file.type) === -1) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    const fileSize = (size) => {\r\n        if (size === 0) return '0 Bytes';\r\n        const k = 1024;\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n        const i = Math.floor(Math.log(size) / Math.log(k));\r\n        return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n    };\r\n\r\n    const fileType = (fileName) => {\r\n        return (\r\n            fileName.substring(\r\n                fileName.lastIndexOf('.') + 1,\r\n                fileName.length\r\n            ) || fileName\r\n        );\r\n    };\r\n    const removeFile = (name) => {\r\n        // find the index of the item\r\n        // remove the item from array\r\n\r\n        const validFileIndex = validFiles.findIndex((e) => e.name === name);\r\n        validFiles.splice(validFileIndex, 1);\r\n        // update validFiles array\r\n        setValidFiles([...validFiles]);\r\n        const selectedFileIndex = selectedFiles.findIndex(\r\n            (e) => e.name === name\r\n        );\r\n        selectedFiles.splice(selectedFileIndex, 1);\r\n        // update selectedFiles array\r\n        setSelectedFiles([...selectedFiles]);\r\n        const unsupportedFileIndex = unsupportedFiles.findIndex(\r\n            (e) => e.name === name\r\n        );\r\n        if (unsupportedFileIndex !== -1) {\r\n            unsupportedFiles.splice(unsupportedFileIndex, 1);\r\n            // update unsupportedFiles array\r\n            setUnsupportedFiles([...unsupportedFiles]);\r\n        }\r\n    };\r\n\r\n    const fileInputClicked = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n    const filesSelected = () => {\r\n        if (fileInputRef.current.files.length) {\r\n            handleFiles(fileInputRef.current.files);\r\n        }\r\n    };\r\n\r\n    const uploadFiles = () => {\r\n        for (let i = 0; i < validFiles.length; i++) {\r\n            const formData = new FormData();\r\n            formData.append('image', validFiles[i]);\r\n            formData.append('key', '3636b273f1f904fd9b011c21423706fd');\r\n            axios\r\n                .post(\r\n                    'https://api.imgbb.com/1/upload',\r\n                    formData,\r\n                    {\r\n                        onUploadProgress: () => {\r\n                            validFiles.length = 0;\r\n                            setValidFiles([...validFiles]);\r\n                            setSelectedFiles([...validFiles]);\r\n                            setUnsupportedFiles([...validFiles]);\r\n                        },\r\n                    },\r\n                    console.log('Successfully uploaded')\r\n                )\r\n\r\n                .catch((err) => {\r\n                    alert('Error Uploading File(s)');\r\n                    console.log(err);\r\n                });\r\n        }\r\n    };\r\n\r\n    // const uploadFiles = () => {\r\n    //     for (let i = 0; i < validFiles.length; i++) {\r\n    //         const data = new FormData();\r\n    //         data.append('image', validFiles[i]);\r\n    //         const config = {\r\n    //             headers: { Authorization: 'Client-ID 457219fb373a6ea' },\r\n    //         };\r\n\r\n    //         axios\r\n    //             .post('https://api.imgur.com/3/image', data, config)\r\n    //             .then(function (response) {\r\n    //                 console.log(response.data);\r\n    //             })\r\n    //             .catch(function (error) {\r\n    //                 console.log(error);\r\n    //             });\r\n    //     }\r\n    // };\r\n\r\n    // const getFiles = () => {\r\n    //     axios({\r\n    //         method: 'get',\r\n    //         url: 'https://api.imgur.com/3/account/mazenHoballah/images/',\r\n    //         headers: { authorization: 'Client-ID 457219fb373a6ea' },\r\n    //     })\r\n    //         .then(function (response) {\r\n    //             console.log(response.data);\r\n    //         })\r\n    //         .catch(function (error) {\r\n    //             console.log(error);\r\n    //         });\r\n    // };\r\n\r\n    const handleRadioChange = (event) => {\r\n        setSelectedValue(event.target.value);\r\n    };\r\n\r\n    const generatePpt = () => {\r\n        var pptx = new pptxgen();\r\n        var slide = pptx.addSlide();\r\n        slide.addText(`type: ${selectedValue.toString()}`, {\r\n            x: 1.5,\r\n            y: 1.5,\r\n            fontSize: 18,\r\n            color: '363636',\r\n        });\r\n        validFiles.forEach((validFile) => {\r\n            console.log(validFile.toString());\r\n            slide.addImage({ path: validFile.toString() });\r\n        });\r\n        pptx.writeFile({ fileName: 'PowerPoint-Demo.pptx' })\r\n            .then((fileName) => {\r\n                console.log(`created file: ${fileName}`);\r\n            })\r\n            .catch((err) => alert(err.message));\r\n    };\r\n\r\n    const sendEmail = () => {\r\n        window.Email.send({\r\n            SecureToken: 'd1411f3a-806a-4b8c-8433-f37b2722bdcf'.toUpperCase(),\r\n            To: email,\r\n            From: 'mazen.hoballah.mh@gmail.com',\r\n            Subject: 'This is the subject',\r\n            Body: 'And this is the body',\r\n            // Attachments: [\r\n            //     {\r\n            //         name: 'test.pptx',\r\n            //         path: pptPath,\r\n            //     },\r\n            // ],\r\n        }).then((message) => {\r\n            alert(message);\r\n            console.log(email);\r\n        });\r\n    };\r\n    return (\r\n        <div className='container'>\r\n            {unsupportedFiles.length === 0 && validFiles.length ? (\r\n                <div>\r\n                    <div className='radio-form' onSubmit={() => uploadFiles()}>\r\n                        <form>\r\n                            <FormControl component='fieldset'>\r\n                                <FormLabel component='legend'>\r\n                                    Choose the slide type you want\r\n                                </FormLabel>\r\n                                <RadioGroup\r\n                                    aria-label='Type'\r\n                                    name='type'\r\n                                    value={selectedValue}\r\n                                    onChange={handleRadioChange}\r\n                                >\r\n                                    <FormControlLabel\r\n                                        value='flowchart'\r\n                                        control={<Radio />}\r\n                                        label='flowchart'\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        value='workflow'\r\n                                        control={<Radio />}\r\n                                        label='workflow'\r\n                                    />\r\n                                </RadioGroup>\r\n                            </FormControl>\r\n                        </form>\r\n                    </div>\r\n                    <div>\r\n                        <h4>Enter your email to receive your slide:</h4>\r\n                        <input\r\n                            type='email'\r\n                            name='email'\r\n                            placeholder='please enter your email'\r\n                            className='email-input'\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div className='buttons'>\r\n                        <Button\r\n                            variant='contained'\r\n                            color='primary'\r\n                            className='file-upload-btn'\r\n                            type='submit'\r\n                        >\r\n                            Upload Files\r\n                        </Button>\r\n                        <Button\r\n                            variant='contained'\r\n                            color='secondary'\r\n                            className='generate-ppt-btn'\r\n                            type='button'\r\n                            onClick={() => generatePpt()}\r\n                        >\r\n                            Generate PPT\r\n                        </Button>\r\n                        <Button\r\n                            variant='contained'\r\n                            color='default'\r\n                            className='generate-ppt-btn'\r\n                            type='button'\r\n                            onClick={() => sendEmail()}\r\n                        >\r\n                            Send ppt\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                ''\r\n            )}\r\n            {unsupportedFiles.length ? (\r\n                <p>Please remove all unsupported files.</p>\r\n            ) : (\r\n                ''\r\n            )}\r\n\r\n            <div\r\n                className='drop-container'\r\n                onDragOver={dragOver}\r\n                onDragEnter={dragEnter}\r\n                onDragLeave={dragLeave}\r\n                onDrop={fileDrop}\r\n                onClick={fileInputClicked}\r\n            >\r\n                <div className='drop-message'>\r\n                    <input\r\n                        ref={fileInputRef}\r\n                        className='file-input'\r\n                        type='file'\r\n                        multiple\r\n                        onChange={filesSelected}\r\n                    />\r\n                    <div className='upload-icon'></div>\r\n                    Drag & Drop files here or click to upload\r\n                </div>\r\n            </div>\r\n            <div className='file-display-container'>\r\n                {validFiles.map((data, i) => (\r\n                    <div className='file-status-bar' key={i}>\r\n                        <div>\r\n                            <div className='file-type-logo'></div>\r\n                            <div className='file-type'>\r\n                                {fileType(data.name)}\r\n                            </div>\r\n                            <span\r\n                                className={`file-name ${\r\n                                    data.invalid ? 'file-error' : ''\r\n                                }`}\r\n                            >\r\n                                {data.name}\r\n                            </span>\r\n                            <span className='file-size'>\r\n                                ({fileSize(data.size)})\r\n                            </span>{' '}\r\n                            {data.invalid && (\r\n                                <span className='file-error-message'>\r\n                                    ({errorMessage})\r\n                                </span>\r\n                            )}\r\n                        </div>\r\n                        <div\r\n                            className='file-remove'\r\n                            onClick={() => removeFile(data.name)}\r\n                        >\r\n                            <ClearIcon />\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default DropZone;\r\n","import './App.css';\nimport React from 'react';\nimport DropZone from './components/drop-zone/drop-zone.component';\n\nfunction App() {\n    return (\n        <div>\n            <div className='content'>\n                <DropZone />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}